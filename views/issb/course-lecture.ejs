<%- include('../partials/header.ejs') %>
<style>
	.con {
  position: relative;
  bottom: -10px;
  height: auto;
  border: none;
}

.video-active{
  background-color: #6f6f6f5c!important;
}
.video-active:hover{
  background-color: #6f6f6f5c !important;
  color: #ffffff!important;
}
/* div.accordion {
  width: 100%;
background: #ffffff!important;
border: 1px solid #e6e6e6ad;
outline: none;
text-align: left;
padding: 15px 10px;
font-size: 14px;
color: #444;
cursor: pointer;
box-shadow: rgb(255 255 255) 0px 3px 5px;
transition: background-color 0.2s linear;
display: flex;
justify-content: flex-start;
flex-direction: row;
align-items: center;
border-radius: 10px;

} */
/* div.accordion:hover {
background: #eaffec94!important;
} */

 
.accordion-content {
max-height: 0;
overflow: hidden;
position:relative;
 top:-5px;
transition: max-height 0.3s ease-in-out;
background-color: #131314 ;
display: flex;
flex-direction: column;
 border-bottom-left-radius: 5px;
border-bottom-right-radius: 5px;
padding: 10px;
} 
.accordion-content p{
  
  border: 1px solid #5555553d;
  border-radius: 8px;
  width: 100%;
  padding: 7px 10px;
  width:95%;
  margin: 0px auto;
  margin-bottom: 5px;
  font-size: 14px;
  color: #ffffff;
  cursor: pointer;
  background-color: #2525255c;
}

.accordion-content a:hover{
  
background-color: #36427b5c!important;  
}

.accordion-content p:last-child{
margin-bottom:10px;
}
.accordion-content p:first-child{
margin-top:10px;
} 
 .tabcontent{

  font-family: "SolaimanLipi", Arial, sans-serif!important;

}

/* .accordion img{
  width: 22px;
  margin-right: 10px;
}  */


</style> 
<style>
    #player {
              position: relative;
            }
        
            .custom-controls {
              position: absolute;
              width: 100%;
              height: 100%;
              bottom: 0px;
              left: 0px;
              background: rgba(255, 255, 255, 0);
              padding: 10px;
              border-radius: 5px;
              color: white;
              cursor: pointer;
            }
            
</style>
<link rel="stylesheet" href="https://cdn.plyr.io/3.7.8/plyr.css">
<div class="video-main-box" style="z-index: 12;">
  <div class="video-container-lesson plyr__video-embed" id="player">
    <iframe id="video-iframe" width="100%" height="100%" src="https://www.youtube.com/embed/pd3NNun8KaI?origin=/issb/lessonvideo?type=IQ&amp;autoplay=1&amp;iv_load_policy=3&amp;modestbranding=1&amp;playsinline=1&amp;showinfo=0&amp;rel=0&amp;enablejsapi=1" allowfullscreen></iframe>
    <div class="custom-controls" id="custom-controls"></div>
  </div>
</div>

<script src="https://cdn.plyr.io/3.7.8/plyr.polyfilled.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
  let player;

  function initializePlyr(videoUrl) {
    player = new Plyr('#player', {
      controls: ['rewind', 'play', 'fast-forward', 'progress', 'current-time', 'mute', 'settings', 'pip', 'airplay', 'fullscreen', 'quality'],
      quality: {
        default: 720,
        options: [1080, 720, 480, 360]
      }
    });

    const customControls = document.getElementById('custom-controls');

    customControls.addEventListener('click', function () {
      // Toggle between play and pause
      if (player.paused) {
        player.play();
      } else {
        player.pause();
      }
    });

    // Set the initial video source
    document.getElementById('video-iframe').src = videoUrl + '?autoplay=1';
  }

  // Find the tab content with a matching data-category attribute of the first .item-menu
  const firstItemMenu = document.querySelector('.item-menu');
  const category = firstItemMenu.dataset.category;
  const content = document.querySelector(`.con .tabcontent[data-category="${category}"]`);

  const firstVideoLink = content.querySelector('.video');

  if (firstVideoLink) {
    const firstVideoUrl = firstVideoLink.getAttribute('data-link') + '?autoplay=1';
    firstVideoLink.classList.add('video-active');

    initializePlyr(firstVideoUrl);

    // Add click event listener for other video links
    const videoLinks = document.querySelectorAll('.video');
    let activeVideoLink = firstVideoLink;

    videoLinks.forEach(link => {
      link.addEventListener('click', function (event) {
        event.preventDefault();

        // Remove the active class from the previously clicked link
        if (activeVideoLink) {
          activeVideoLink.classList.remove('video-active');
        }

        // Add the active class to the clicked link
        this.classList.add('video-active');
        activeVideoLink = this;

        const videoUrl = this.getAttribute('data-link');

        // Destroy the existing Plyr instance
        player.destroy();

        // Update the iframe source to the video URL directly
        document.getElementById('video-iframe').src = videoUrl + '?autoplay=1';

        // Reinitialize Plyr with the new video
        initializePlyr(videoUrl);
      });
    });
  }
});

</script>

  <section class="con">
    <% if (courseTypes && courseTypes.some(Boolean)) { %>
      <div id="slide-menu" style="font-family: SolaimanLipi!important">
        <% courseTypes.forEach(category => { %>
          <div class="item-menu" data-category="<%= category %>"><%= category %></div>
        <% }); %>
      </div>
    <% } %>
    
    

      <% for (const syllabusItem of course.course_syllabus) { %>
        <div class="tabcontent hide-show" data-category="<%= syllabusItem.course_content_type %>">
          <div class="accordion"> 
            <img src="<%= syllabusItem.course_content_icon_url %>" alt="">

            <span><%= syllabusItem.course_content_title %></span>
            <i class="fa-solid fa-angle-down angle-right"></i>
          </div>
          <div class="accordion-content">
            <% const detailsArray = syllabusItem.course_content_details ? JSON.parse(syllabusItem.course_content_details) : []; %>
      
            <% for (const detail of detailsArray) { %>
              <% if (detail.type === 'video') { %>
                <p data-link="<%= detail.link %>" class="video"><i class="fa-solid fa-play"></i>&nbsp;&nbsp;<%= detail.title %></p>
              <% } else if (detail.type === 'pdf') { %>
                <a href="<%= detail.link %>"><i class="fas fa-file-pdf"></i>&nbsp;&nbsp;<%= detail.title %></a>
              <% } else { %>
                <a href="<%= detail.link %>"><i class="fa-solid fa-indent"></i>&nbsp;&nbsp;<%= detail.title %></a>
              <% } %>
            <% } %>
          </div>
        </div>
      <% } %>



      <script>
        document.addEventListener('DOMContentLoaded', function () {
          const slideMenu = document.getElementById('slide-menu');
          const itemMenus = document.querySelectorAll('.item-menu');
          const questionContainers = document.querySelectorAll('.tabcontent');
      
          const initialActiveCategory = itemMenus.length > 0 ? itemMenus[0].dataset.category : 'ALL';
      
          // Find the item-menu with the matching data-category and make it active
          const initialActiveItem = Array.from(itemMenus).find(item => item.dataset.category === initialActiveCategory);
          if (initialActiveItem) {
            initialActiveItem.classList.add('active-doubts');
            // Move the initially active item to the beginning of the slide-menu
            slideMenu.insertBefore(initialActiveItem, slideMenu.firstChild);
          }
      
         
      
          // Function to hide/show question containers based on the selected category
          function updateContainers(selectedCategory) {
            questionContainers.forEach(container => {
              const containerCategory = container.dataset.category;
      
              if (selectedCategory === 'ALL' || selectedCategory === containerCategory) {
                container.style.display = 'block';
              } else {
                container.style.display = 'none';
              }
            });
          }
      
          // Initial update based on the dynamically set initial active category
          updateContainers(initialActiveCategory);
      
          itemMenus.forEach(itemMenu => {
            itemMenu.addEventListener('click', function () {
              const selectedCategory = this.dataset.category;
      
              itemMenus.forEach(item => item.classList.remove('active-doubts'));
              this.classList.add('active-doubts');
      
              // Update question containers based on the selected category
              updateContainers(selectedCategory);
            });
          });
        });
      </script>
      
      

</section>


<div id="floatingMenu" style="text-align: center; color: white!important;">
  <a href="<%= courseGroup %>"><h3  style="color: white!important; background-color: #331337; padding: 8px; border-radius: 10px; ">Join Private Group</h3></a>
  <p style="margin-top: 10px;"><%= courseNotice %></p>
</div>

  <div id="menuicon">
      <i class="fa-solid fa-list-ol"></i>
  </div>

<br><br><br><br>

 <!-- bottom nagivatoin section  -->

 <%- include('../partials/bottom-nav.ejs') %>

 <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>

 
$(document).ready(function(){
  $("#menuicon").on("click", function(event){
    event.stopPropagation(); // Prevent the click event from reaching the document
    $("#floatingMenu").fadeToggle(100);
  });

  $("#floatingMenu").on("click", function(event) {
    event.stopPropagation(); // Prevent the click event from reaching the document
  });

  $(document).on("click", function(event) {
    // Check if the clicked element is not a descendant of #floatingMenu or #menuicon
    if (!$(event.target).closest("#floatingMenu, #menuicon").length) {
      $("#floatingMenu").fadeOut(0);
    }
  });
});


  var accordions = document.getElementsByClassName("accordion");
  var contents = document.getElementsByClassName("accordion-content");

  for (var i = 0; i < accordions.length; i++) {
    // Set all accordions to be open initially
    accordions[i].classList.add('is-open');
    contents[i].style.maxHeight = contents[i].scrollHeight + "px";
    var lastItem = accordions[i].querySelector('.angle-right');
    if (lastItem) {
      lastItem.classList.add('rotate');
    }

    // Add click event listener to each accordion
    accordions[i].onclick = function () {
      // Toggle open class
      this.classList.toggle('is-open');

      // Get the corresponding accordion content element
      var content = this.nextElementSibling;

      // Toggle max-height and transition on the clicked accordion content element
      if (content.style.maxHeight) {
        content.style.maxHeight = null;
      } else {
        content.style.maxHeight = content.scrollHeight + "px";
      }
      content.style.transition = "max-height 0.2s ease-out";

      // Toggle rotate class on the last item of the clicked accordion element
      var lastItem = this.querySelector('.angle-right');
      if (lastItem) {
        lastItem.classList.toggle('rotate');
      }
    };
  }


const videoIframe = document.querySelector('.video-main-box');
const con = document.querySelector('.con');

function setMarginTop() {
  con.style.marginTop = videoIframe.offsetHeight + 'px';
}

setMarginTop(); // initial setting

window.addEventListener('resize', setMarginTop);


</script>


<!-- Add this script in your HTML file -->
<script>
  document.addEventListener('contextmenu', function (e) {
      e.preventDefault();
      e.stopPropagation(); // Stop the event from propagating
  });

  document.addEventListener('keydown', function (event) {
      // Check if Ctrl+Shift+I or Cmd+Option+I is pressed
      if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'I') {
          event.preventDefault(); // Prevent the default behavior
          event.stopPropagation(); // Stop the event from propagating
      }

      // Add more conditions for other shortcuts as needed
      // For example, Ctrl+Shift+J or Cmd+Option+J
      if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'J') {
          event.preventDefault();
          event.stopPropagation();
      }
      if ((event.ctrlKey || event.metaKey) && event.shiftKey && event.key === 'C') {
          event.preventDefault();
          event.stopPropagation();
      }
  });

  // Listen for screen capture
  navigator.mediaDevices.getDisplayMedia = function() {
      return new Promise(function(resolve, reject) {
          reject(new Error('Screen capturing is disabled'));
      });
  };
</script>
